---
title: "Bombs from Biplanes"
subtitle: "WWI Allied Bombing on the Western Front"
author: "Daniel Bagley"
format: 
  html:
    self-contained: true
    theme: minty
    code-fold: true
    code-line-numbers: true
    mainfont: math
    code-tools: true
    toc: true
    fig-align: "center"
    fig-width: 6
    fig-asp: 0.618
  gfm:
    code_fold: true
    code_tools: true
editor: source
editor_options: 
  chunk_output_type: console
---


```{r}
#| label: read/wrangle
#| warning: false
#| message: false

pacman::p_load(mosaic, lubridate, httr2, jsonlite, tidyverse)
Google_API_key <- "AIzaSyBfezqfhiLnf_tDQc5td54JUOCMFzFDwH4"
FS_App_key <- "DJKT-DH2K-V9WN-M9RB-LMMV-4477-9HSJ-LZ8G"
FS_token <- "b0-mF04Nwu5NvR.mQ2tmYgEzRH" #not sure if this thing expires or not

gen_FS_API_key <- function(client_id){
  ip_address <- system("ipconfig getifaddr en0", intern = TRUE)
  req <- httr2::request("https://identbeta.familysearch.org/cis-web/oauth2/v3/token") |> 
    httr2::req_headers(Accept = "application/json") |> 
    httr2::req_body_form(grant_type= "unauthenticated_session", 
                       ip_address = ip_address, 
                       client_id = client_id)
  req_perform(req)
}

geocode_latlong <- function(address, Google_API_key){
  address_c <- str_replace_all(address, "\\s", "%20")
  geocode_api <- "https://maps.googleapis.com/maps/api/geocode/json?address="
  output <- jsonlite::fromJSON(str_c(geocode_api, address_c, "&key=", API_key))
  return(output$results$geometry$location)
}


date_clean <- function(date) { #janky function to parse posixct dates from the data
  day <- str_sub(date, end = 2)
  month <- str_sub(date, start = 3, end = 5)
  year <- str_sub(date, start = -4)
  monat <- clean_month(month)
  moment <- str_c(day, monat, year)
  parse_date(moment, format = "%d%m%Y" )
}

clean_month <- function(month) {
  #turns month abbreviations into 2 digit indicators for POSIXCT to parse
  monat <-case_when(month == "Jan" ~ "01",
                    month == "Feb" ~ "02",
                    month == "Mar" ~ "03",
                    month == "Apr" ~ "04",
                    month == "May" ~ "05",
                    month == "Jun" ~ "06",
                    month == "Jul" ~ "07",
                    month == "Aug" ~ "08",
                    month == "Sep" ~ "09",
                    month == "Oct" ~ "10",
                    month == "Nov" ~ "11",
                    month == "Dec" ~ "12")
  return(monat)
}

all_bombs <- read_csv("data/western_front_bombing.csv") |> 
  #add index column for editing
  mutate(index = 1:length(Date)) |> 
  filter(!(index %in% c(12, 2644, 6064, 7055)))  |> #Rows with errors identified by read_csv
#Edit Variable Names
  #remove non-syntactically sound characters
  rename_with( ~ str_replace_all(.x, "(-\\s)|((?<!L)-)|\\(|\\)|\\?", "")) |> 
  rename_with( ~ str_replace_all(.x, "\\#", "num")) |> 
  #send all names to snake case
  rename_with( ~ tolower(gsub(" ", "_", .x, fixed = TRUE))) |> 
  #cover all the names that were uniquely bad
  rename( raid_or_alert = `raid=1,_alert=0`, summary_or_comments = `summary_rec_t/f_or_comments`,
         ships_launched = `a/c_launched`, forced_landing_no_damage = `fl-no_damage`, 
         forced_landing_damage = `fl-damage`, ship_type = `a/c_type`, 
         source = `page_num,_maurer_maurer,_v.iv,_or_other_reference`) |> 
#Fix the Dates
  mutate(
    #Replace the 2 digit year code with a 4 digit year code and show off that I know what a regex is
    date_new = str_replace(date, "(?<=\\w{3})\\d{2}", function(x) str_c("19", x)),
    #use my clunky function to get POSIXCT dates
    date = date_clean(date_new)) |> 
  separate(date_new, into = c("day", "month", "year"), sep = c(2, 5)) |> 
# mutate some columns with interesting features
  mutate(tgt_type_exp = case_when(
    target_type == "A" ~ "Airfield",
    target_type == "B" ~ "Blast Furnace",
    target_type == "C" ~ "Chemical",
    target_type == "I" ~ "Industry",
    target_type == "M" ~ "Munitions Factory",
    target_type == "R" ~ "Rail Target",
    target_type == "T" ~ "Tactical",
    target_type == "O" ~ "Other/Multiple",
    target_type == "P" ~ "Reprisals"),
    bombs_per_ship = bomb_wgt_lb / ships_launched
    )



  #we only want non-summary reports of allied squadrons
bombs <- filter(all_bombs, !is.na(sqn), !(summary_or_comments == "TRUE")) 
# Sum NAs in each column
NAS <- map_dbl(bombs, function(x) sum(is.na(x))) 
# Don't need the last 10 columns in this 49 column dataset
keeps <- names(sort(NAS)[1:(ncol(bombs) - 10)])
bombs <- bombs |> 
  select(all_of(keeps))

```



```{r}
#| label: Graph bomb usage over time

bombs |> 
  filter(!is.na(tgt_type_exp), !target_type == "P" ) |> 
ggplot(aes(y = bomb_wgt_lb, x = date, color = tgt_type_exp)) +
  geom_point() +
  facet_wrap(facets = vars(ship_type), scales = "free_y") +
  theme(legend.position = "bottom",
        axis.text.x = element_text(angle = 70, vjust = 0.6, hjust = 0.5))

ggplot(bombs, aes(y = bomb_wgt_lb, fill = ship_type)) +
  geom_boxplot()

ggplot(bombs, aes(y = bombs_per_ship, fill = ship_type)) + 
  geom_boxplot()

bombs_per_month <- bombs |> 
  group_by(month, year) |> 
  summarize(count = n(),
            weight = sum(bomb_wgt_lb, na.rm = TRUE),
            num_bombs = sum(num_bombs, na.rm = TRUE),
            num_ships = sum(ships_launched, na.rm = TRUE)) |> 
  mutate(month = clean_month(month),
         date = parse_date(str_c(month, year, sep = ""), format = "%m%Y")) |> 
  filter(!is.na(date), !date == "1918-11-01")

ggplot(bombs_per_month, aes(x = date, y = count)) + 
  geom_col() +
  geom_smooth()


```

```{r}
#| label: Breguet14_bomb_capacity

breguet_arm <- bombs |> 
  filter(ship_type == "Breguet14")
breg_ord_lm <- lm(bomb_wgt_lb ~ ships_launched, data = breguet_arm)
pander::pander(summary(breg_ord_lm))
b <- coef(breg_ord_lm)
ggplot(breguet_arm, aes(y = bomb_wgt_lb, x = ships_launched)) + 
  geom_point() +
  stat_function(fun = function(x) b[1] + (b[2] * x), size = 1.5, color = "navy") +
  annotate("label", x = 130, y = 80000, label = str_c("Average: ", as.character(round(mean(breguet_arm$bomb_wgt_lb, na.rm = TRUE), 2)), "\nslope: ", as.character(round(b[2],3)))) +
  labs(title = "Change in Bombs per Run by number of Breguets",
       x = "Number of Breguet 14s in Bombing Run",
       y = "Total weight in pounds of bombs dropped")

```

```{r}
#| label: Largest bombing runs of WWI

big_bombs <- bombs |> 
  arrange(-bomb_wgt_lb) |> 
  head(50)

```


```{r}
#| label: What is up with Dirigibles?

dirg <- bombs |> 
  filter(ship_type == "Dirg.")


ggplot(dirg, aes(y = bombs_per_ship, x = date)) + 
  geom_point()
```




```{r}
pacman::p_load(httr2)

targets <- bombs$target_location |> unique()



western_front <- yourip |> filter(NAME %in% c("France", "Germany", "Switzerland", "Belgium"))

ggplot(western_front) + 
  geom_sf(aes(fill = NAME)) 

standard_place <- function(place, FS_acc_token){
  place_string = str_c("name:", place, "~+parentId:280")
  req <- request("https://beta.familysearch.org/platform/places/search") |> 
    req_headers(Accept = "application/json",
                Authorization = str_c("Bearer ", FS_acc_token)) |> 
    req_url_query(q = place_string)
  #req_dry_run(req)
  resp_body_json(req_perform(req))
}

FS_placesearch_first <- function(FS_json){
  FS_json$entries[[1]]$content$gedcomx$places[[1]]
}

FS_placesearch_names <- function(FS_json){
  len <- length(FS_json$entries)
  names <- rep(NA, len)
  for(i in 1:len) {
    names[i] <- FS_json$entries[[i]]$content$gedcomx$places[[1]]$names[[1]]$value
  }
  names
}

avjson$entries[[1]]$content$gedcomx$places[[1]]$names[[1]]$value

```





```{r}



```







